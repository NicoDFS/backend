# Core Uniswap V2 entities adapted for KalyChain
type Bundle @entity(immutable: false) {
  id: ID!
  klcPrice: BigDecimal! # price of KLC in USD
}

type KalyswapFactory @entity(immutable: false) {
  id: ID!
  pairCount: Int!
  totalVolumeKLC: BigDecimal!
  totalLiquidityKLC: BigDecimal!
  totalVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  txCount: BigInt!
}

type Token @entity(immutable: false) {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  totalLiquidity: BigDecimal!
  derivedKLC: BigDecimal!
}

type Pair @entity(immutable: false) {
  id: ID!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  reserveKLC: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveKLC: BigDecimal!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  liquidityProviderCount: BigInt!
}

type PairTokenLookup @entity(immutable: false) {
  id: ID!
  pair: Pair!
}

type User @entity(immutable: false) {
  id: ID!
}

type Transaction @entity(immutable: false) {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!
}

type Mint @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  to: Bytes!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  amountUSD: BigDecimal
}

type Burn @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  liquidity: BigDecimal!
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  amountUSD: BigDecimal
  needsComplete: Boolean!
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: Bytes!
  from: Bytes!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt!
  amountUSD: BigDecimal!
}

type PairCreatedEvent @entity(immutable: true) {
  id: ID!
  factory: KalyswapFactory!
  token0: Token!
  token1: Token!
  pair: Pair!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type SyncEvent @entity(immutable: true) {
  id: ID!
  pair: Pair!
  reserve0: BigInt!
  reserve1: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type DayData @entity(immutable: false) {
  id: ID!
  date: Int!
  factory: KalyswapFactory!
  volumeKLC: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolume: BigDecimal!
  liquidityKLC: BigDecimal!
  liquidityUSD: BigDecimal!
  txCount: BigInt!
}

type PairDayData @entity(immutable: false) {
  id: ID!
  date: Int!
  pair: Pair!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  reserveUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
}

type TokenDayData @entity(immutable: false) {
  id: ID!
  date: Int!
  token: Token!
  volume: BigDecimal!
  volumeKLC: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
  liquidityKLC: BigDecimal!
  liquidityUSD: BigDecimal!
  priceUSD: BigDecimal!
}

type PairHourData @entity(immutable: false) {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Token events
type TransferEvent @entity(immutable: true) {
  id: ID!
  token: Token!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ApprovalEvent @entity(immutable: true) {
  id: ID!
  token: Token!
  owner: Bytes!
  spender: Bytes!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# StakingRewards entities
type StakingPool @entity(immutable: false) {
  id: ID!
  address: Bytes!
  stakingToken: Token!
  rewardsToken: Token!
  totalStaked: BigInt!
  rewardRate: BigInt!
  rewardsDuration: BigInt!
  periodFinish: BigInt!
  lastUpdateTime: BigInt!
  rewardPerTokenStored: BigInt!
  stakers: [Staker!]! @derivedFrom(field: "pool")
  stakeEvents: [StakeEvent!]! @derivedFrom(field: "pool")
  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "pool")
  rewardEvents: [RewardEvent!]! @derivedFrom(field: "pool")
  rewardAddedEvents: [RewardAddedEvent!]! @derivedFrom(field: "pool")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Staker @entity(immutable: false) {
  id: ID!
  address: Bytes!
  pool: StakingPool!
  stakedAmount: BigInt!
  rewards: BigInt!
  rewardPerTokenPaid: BigInt!
  stakeEvents: [StakeEvent!]! @derivedFrom(field: "staker")
  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "staker")
  rewardEvents: [RewardEvent!]! @derivedFrom(field: "staker")
  lastAction: String!
  lastActionTimestamp: BigInt!
}

type StakeEvent @entity(immutable: true) {
  id: ID!
  staker: Staker!
  pool: StakingPool!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type WithdrawEvent @entity(immutable: true) {
  id: ID!
  staker: Staker!
  pool: StakingPool!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type RewardEvent @entity(immutable: true) {
  id: ID!
  staker: Staker!
  pool: StakingPool!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type RewardAddedEvent @entity(immutable: true) {
  id: ID!
  pool: StakingPool!
  amount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# LiquidityPoolManager entities
type LiquidityPoolManager @entity(immutable: false) {
  id: ID!
  address: Bytes!
  wklc: Bytes!
  kswap: Bytes!
  treasuryVester: Bytes!
  klcKswapPair: Bytes!
  klcSplit: BigInt!
  kswapSplit: BigInt!
  splitPools: Boolean!
  whitelistedPools: [WhitelistedPool!]! @derivedFrom(field: "manager")
  unallocatedKswap: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type WhitelistedPool @entity(immutable: false) {
  id: ID!
  manager: LiquidityPoolManager!
  pair: Pair!
  weight: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# TreasuryVester entities
type TreasuryVester @entity(immutable: false) {
  id: ID!
  address: Bytes!
  kswap: Bytes!
  recipient: Bytes!
  vestingAmount: BigInt!
  vestingBegin: BigInt!
  vestingCliff: BigInt!
  vestingEnd: BigInt!
  lastUpdate: BigInt!
  vestingEnabled: Boolean!
  tokensVestedEvents: [TokensVestedEvent!]! @derivedFrom(field: "vester")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TokensVestedEvent @entity(immutable: true) {
  id: ID!
  vester: TreasuryVester!
  amount: BigInt!
  recipient: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# Router entities
type Router @entity(immutable: false) {
  id: ID!
  address: Bytes!
  factory: Bytes!
  WKLC: Bytes!
  totalSwaps: BigInt!
  totalVolumeUSD: BigDecimal!
  totalVolumeKLC: BigDecimal!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type RouterSwap @entity(immutable: true) {
  id: ID!
  router: Router!
  transactionHash: Bytes!
  logIndex: BigInt!
  sender: Bytes!
  recipient: Bytes!
  path: [Bytes!]!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  amountInUSD: BigDecimal!
  amountOutUSD: BigDecimal!
  swapType: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
}
