// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String?   @unique
  passwordHash  String
  salt          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wallets       Wallet[]
  transactions  Transaction[]
  apiKeys       ApiKey[]
}

model Wallet {
  id                 String    @id @default(uuid())
  address            String    @unique
  encryptedPrivateKey String
  salt               String
  iv                 String
  chainId            Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  transactions       Transaction[]
}

model Transaction {
  id            String    @id @default(uuid())
  type          TransactionType
  status        TransactionStatus
  hash          String?   @unique
  fromAddress   String
  toAddress     String?
  amount        String
  tokenAddress  String?
  tokenSymbol   String?
  tokenDecimals Int?
  fee           String?
  blockNumber   Int?
  timestamp     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  walletId      String
}

enum TransactionType {
  SEND
  RECEIVE
  SWAP
  STAKE
  UNSTAKE
  CLAIM_REWARD
  PROVIDE_LIQUIDITY
  REMOVE_LIQUIDITY
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model ApiKey {
  id          String    @id @default(uuid())
  name        String    // Friendly name for the API key
  keyHash     String    @unique // Hashed version of the API key
  prefix      String    // First 8 characters for identification
  permissions String[]  // Array of permissions (e.g., ["read", "write", "admin"])
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime? // Optional expiration date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@index([keyHash])
  @@index([userId])
}

enum ApiKeyPermission {
  READ_PUBLIC    // Can read public DEX data, bridge data, etc.
  READ_USER      // Can read user-specific data (requires user context)
  WRITE_USER     // Can perform user operations (wallet creation, transactions)
  ADMIN          // Full admin access
}
